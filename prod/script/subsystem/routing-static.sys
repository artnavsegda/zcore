
add() {
    echo $name | grep -qE '^[a-zA-Z0-9\_\-]+$' || {
        stderr "name must be alpha-numberic and '-' '_'"
        return 1
    }

    ubus call uci get "{'config': 'network', 'type': 'route', 'match': {'name': '$name'}}" | jsonfilter -e "@.values[*]['.name']" &>/dev/null && {
        stderr "$name name already exist"
        return 1
    }

    get_next_name cfg network "route_"

    json_add_string type "unicast"
    config='{"config": "network", "type": "route", "name": "'$cfg'", "values": '$(json_dump)'}'
    eval "ubus call uci add '$config'" &> /dev/null

    data="$(ubus call uci get '{"config": "network", "type": "route", "section": "'$cfg'"}' | jsonfilter -e "@.values")"
    echo '{ "'$cfg'": '$data' }' | zfilter $_SCHEMA
}

onset() {
    [ "$_VALUE" = "true" ]  && _VALUE=1
    [ "$_VALUE" = "false" ] && _VALUE=0

    case "$_OPTION" in
        *)  uci -q set network.${_SECTION}.${_OPTION}="${_VALUE}" ;;
    esac
}

get() {
    data=$(ubus call uci get "{'config': 'network', 'type': 'route'}" | jsonfilter -e "@.values")
    json_load "$data"
    json_get_keys rr

    let i=0
    for route in $rr; do
        let i++
        json_select $route
            json_get_vars name target interface
            [ -z "$name" ] && {
                target="$(echo "${target%/*}" | tr '.' '-')"
                [ -z "$target" ] && target="undefined{$i}"
                name=${target}${interface:+"@{interface}"}
                uci -q set network.$route.name="$name"
                json_add_string name "$name"
            }
        json_select ..
    done

    json_dump | zfilter $_SCHEMA
}

revert() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -n "$_SECTION" ] && uci -q revert network.${_SECTION} || {
        cfgs=$(uci changes | awk -F'.' '/route_[0-9]{1,4}(\.|$)/{print $2}' | sort -u)
        for cfg in $cfgs; do
            uci -q revert network.${cfg}
        done
    }
    apply
}

delete() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -n "$_SECTION" ] && uci -q delete network.${_SECTION} || {
        ubus call uci delete "{'config': 'network', 'type': 'route'}"
    }
    apply
}

apply() { ## reload instance 
	ubus call network reload
}

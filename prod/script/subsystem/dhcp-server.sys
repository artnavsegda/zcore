
add() {
    echo $name | grep -qE '^[a-z0-9]+$' || {
        stderr "name must be alpha-numberic"
        return 1
    }

    ubus call uci get "{'config': 'dhcp', 'section': '$name'}" | jsonfilter -e "@.values['.name']" &>/dev/null && {
        stderr "$name name already exist"
        return 1
    }

    uci -q set dhcp.$name="dhcp"
    uci -q set dhcp.$name.force=1

    data="$(ubus call uci get "{'config': 'dhcp', 'type': 'dhcp', 'section': '$name'}" | jsonfilter -e "@.values")"
    echo '{ "'$name'": '$data' }' | zfilter $_SCHEMA
}

onset() {
    [ "$_VALUE" = "true" ]  && _VALUE=1
    [ "$_VALUE" = "false" ] && _VALUE=0

    case "$_OPTION" in
        dhcp_option)
            uci -q delete dhcp.${_SECTION}.${_OPTION}
            for v in $_VALUE; do
                uci -q add_list dhcp.${_SECTION}.${_OPTION}=$v
            done
            ;;
        *)  uci -q set dhcp.${_SECTION}.${_OPTION}="${_VALUE}" ;;
    esac    
}

get() {
    data=$(ubus call uci get "{'config': 'dhcp', 'type': 'dhcp'}" | jsonfilter -e "@.values")
    json_load "$data"
    json_get_keys ss

    for dhcp in $ss; do
        json_select $dhcp
        json_get_vars ignore force
        [ "$ignore" = "1" ] && {
            json_select ..
            json_add_null $dhcp
            continue
        }

        [ "$force" != "1" ] && {
            uci -q set dhcp.$dhcp.force=1
            uci commit dhcp
            json_add_boolean force 1
        }
        
        json_select ..
    done

    json_dump | zfilter $_SCHEMA
}

revert() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -n "$_SECTION" ] && uci -q revert dhcp.${_SECTION} || {
        stderr "usage: revert <name>"
        return 1
    }    
}

delete() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -n "$_SECTION" ] && uci -q delete dhcp.${_SECTION} || {
        ubus call uci delete "{'config': 'dhcp', 'type': 'dhcp'}"
    }    
}

apply() { ## reload instance 
    /etc/init.d/dnsmasq restart
}

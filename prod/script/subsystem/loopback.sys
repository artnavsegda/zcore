
add() {
    echo $name | grep -qE '^[a-z0-9]+$' || {
        stderr "name must be alpha-numberic"
        return 1
    }

    ubus call uci get "{'config': 'network', 'section': '$name'}" | jsonfilter -e "@.values['.name']" &>/dev/null && {
        stderr "$name name already exist"
        return 1
    }

    uci -q set network.$name="interface"
    uci -q set network.$name.proto="static"
    uci -q set network.$name.ifname="lo"

    data="$(ubus call uci get '{"config": "network", "type": "interface", "section": "'$name'"}' | jsonfilter -e "@.values")"
    echo '{ "'$name'": '$data' }' | zfilter $_SCHEMA
}

onset() {
    [ "$_VALUE" = "true" ]  && _VALUE=1
    [ "$_VALUE" = "false" ] && _VALUE=0

    case "$_OPTION" in
        *)  uci -q set network.${_SECTION}.${_OPTION}="${_VALUE}" ;;
    esac
}

get() {
    data=$(ubus call uci get "{'config': 'network', 'type': 'interface', 'match': {'ifname': 'lo'}}" | jsonfilter -e "@.values")
    json_load "$data"
    json_get_keys ll

    for loopback in $ll; do
        json_select $loopback
            ## do something        
        json_select ..
    done

    json_dump | zfilter $_SCHEMA
}

revert() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -z "$_SECTION" ] && return 1
    uci -q revert network.${_SECTION}
    ubus call network reload
}

delete() {
    keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
    [ -z "$_SECTION" ] && return 1
    uci -q delete network.${_SECTION}
    ubus call network reload
}

apply() { ## reload instance 
	keymatch _SECTION "$_NAMESAKES" "$_SECTIONS" $@
	[ -n "$_SECTION" ] && ifup $_SECTION || ubus call network reload
}
